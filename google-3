

def read_number(line, index):
    number = 0
    while index < len(line) and line[index].isdigit():
        number = number * 10 + int(line[index])
        index += 1
    if index < len(line) and line[index] == '.':
        index += 1
        decimal = 0.1
        while index < len(line) and line[index].isdigit():
            number += int(line[index]) * decimal
            decimal /= 10
            index += 1
    token = {'type': 'NUMBER', 'number': number}
    return token, index


def read_plus(line, index):
    token = {'type': 'PLUS'}
    return token, index + 1


def read_minus(line, index):
    token = {'type': 'MINUS'}
    return token, index + 1


def read_times(line, index):
    token = {"type": "TIMES"}
    return token, index + 1


def read_slash(line, index):
    token = {"type": "SLASH"}
    return token, index + 1

def read_brackets_S(line, index):
    token = {"type": "BRACKETS_S"}
    return token, index + 1

def read_brackets_F(line, index):
    token = {"type": "BRACKETS_F"}
    return token, index + 1


def tokenize(line):
    tokens = []
    index = 0
    while index < len(line):
        if line[index].isdigit():
            (token, index) = read_number(line, index)
        elif line[index] == '+':
            (token, index) = read_plus(line, index)
        elif line[index] == '-':
            (token, index) = read_minus(line, index)
        elif line[index] == "*" :
            (token, index) = read_times(line, index)
        elif line[index] == "/" :
            (token, index) = read_slash(line, index)
        elif line[index] == "(":
            (token, index) = read_brackets_S(line, index)
        elif line[index] == ")":
            (token, index) = read_brackets_F(line, index)
        else:
            print('Invalid character found: ' + line[index])
            exit(1)
        tokens.append(token)
    return tokens


def evaluate(tokens):
    answer = 0
    tokens.insert(0, {'type': 'PLUS'}) # Insert a dummy '+' token
    
    index = 1
    while index < len(tokens):
        if tokens[index]['type'] == 'BRACKETS_S':
            if tokens[index-1]['type'] == "NUMBER":
                tokens.insert(index,{'type': 'TIMES'}) #2(1+1)=4に対応するため、数字と()が連続していたらその間に*を入れる
                index +=2
        index +=1

    index = 0
    while index < len(tokens):
        if tokens[index]['type'] == 'BRACKETS_F':
            close_index = index
            open_index = index
            while open_index >= 0:
                if tokens[open_index]['type'] == 'BRACKETS_S':
                    break
                open_index -=1
            else:
                print("where is brckets")
                exit(1)
            new_tokens = tokens[open_index + 1:close_index]
            value = evaluate(new_tokens)

            tokens[open_index : close_index +1 ] = [{"type": "NUMBER", "number": value}]
            index = open_index
        else:
            index += 1


    index = 1
    while index < len(tokens):
        if tokens[index]['type'] == 'NUMBER':
            if tokens[index - 1]['type'] == 'TIMES':
                tokens[index] = {"type":"NUMBER", "number": tokens[index -2]["number"] * tokens[index]['number']}
                del tokens[index-2 :index]
                index -= 2
            elif tokens[index - 1]['type'] == 'SLASH' :
                tokens[index] = {"type":"NUMBER", "number": tokens[index -2]["number"] / tokens[index]['number']}
                del tokens[index-2 :index]
                index -= 2
        index += 1

    index = 1

    while index < len(tokens):
        if tokens[index]['type'] == 'NUMBER':
                if tokens[index - 1]['type'] == 'PLUS':
                    answer += tokens[index]['number']
                elif tokens[index - 1]['type'] == 'MINUS':
                    answer -= tokens[index]['number']
                else:
                    print('Invalid syntax')
                    exit(1)
        index += 1
    return answer


def test(line):
    tokens = tokenize(line)
    actual_answer = evaluate(tokens)
    expected_answer = eval(line)
    if abs(actual_answer - expected_answer) < 1e-8:
        print("PASS! (%s = %f)" % (line, expected_answer))
    else:
        print("FAIL! (%s should be %f but was %f)" % (line, expected_answer, actual_answer))






# Add more tests to this function :)
def run_test():
    print("==== Test started! ====")
    test("1+2")
    test("1.0+2.1-3")
    test("10+5*3")
    test("-6+0.05*20")
    test("4+10*10*10+20")
    test("33-15/3*6-3")
    test("(2+3)*4")
    test("2*(1+1)")
    test("(1+2)*(3+4)")
    test("((2+3)*2+1)*2")
    test("38+((2+3)*2+1)*2")
    print("==== Test finished! ====\n")

run_test()

while True:
    print('> ', end="")
    line = input()
    tokens = tokenize(line)
    answer = evaluate(tokens)
    print("answer = %f\n" % answer)